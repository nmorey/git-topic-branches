#!/bin/bash

source $(dirname $(readlink -f ${0}))/tools.sh

__rebase_branch()
{
	local branch=$1
	local base=$2
	local ignore_err=$3

	local branch_head=$(git rev-parse $branch)
	local base_head=$(git rev-parse $base)

	if [ "$branch_head" == "$base_head" ]; then
		echo "INTEGRATED UPSTREAM: ${branch} made it into ${base}"
		return
	fi

	co_repo=$(gittools_is_branch_checked_out $branch)
	if [ "$co_repo" != "" ]; then
		echo "SKIPPING: ${branch} already checked out @ ${co_repo}"
		return
	fi
	echo "REBASING: ${branch} on ${base}"
	git checkout  $branch

	git rebase $base
	if [ $? -ne 0 ]; then
		echo "REBASING FAILURE: ${branch} on ${base}"
		if [ "$ignore_err" == 1 ]; then
			git rebase --abort
		else
			echo "REBASING FAILURE: Stopping here for manual fixup"
			exit 1
		fi
	fi
	branch_head=$(git rev-parse $branch)

	if [ "$branch_head" == "$base_head" ]; then
		echo "INTEGRATED UPSTREAM: ${branch} just made it into ${base}"
		return
	fi
}

original_branch=$(gittools_curbranch)

(if [ $# -ne 0 ]; then
	 branch=$1
	 if [ "$1" == "HEAD" ]; then
		 branch=$(git rev-parse --abbrev-ref HEAD)
	 fi
	 matching=$(gittools_match_branch $branch)
	 if [ "$matching" == "" ]; then
		 echo "REBASING: Branch '$branch' has not matching rebase"
	 else
		 __rebase_branch $branch ${matching} 0
	 fi
else
	BRANCHES=$(git branch | awk '{ print $NF}')
	for branch in $BRANCHES; do
		matching=$(gittools_match_branch $branch)
		if [ "$matching" != "" ]; then
			__rebase_branch $branch $matching 1
		fi
	done
fi) 2>&1 | grep -e REBASING -e INTEGRATED -e SKIPPING

if [ "$original_branch" != "" ]; then
	git checkout $original_branch
fi
