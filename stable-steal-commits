#!/bin/bash
#
# Try to grab commits from one stable tree into another, stopping to fix
# backports if required.
#

source $(dirname $(readlink -f ${0}))/tools.sh

function pick_one {

	# Let's try cherry-picking the given commit first.
	git cherry-pick --strategy=recursive -Xpatience -x $1 &> /dev/null
	if [ $? -gt "0" ]; then
		if [ $(git status -uno --porcelain | wc -l) -eq 0 ]; then
			git reset --hard
			return 1
		fi
		git reset --hard
		# That didn't work? Let's try that with every variation of the commit
		# in other stable trees.
		for i in $(stable-find-alts $1); do
			git cherry-pick --strategy=recursive -Xpatience -x $i &> /dev/null
			if [ $? -eq 0 ]; then
				return 0
			fi
			git reset --hard
		done

		# Still no? Let's go back to the original commit and hand it off to
		# the user.
		git cherry-pick --strategy=recursive -Xpatience -x $1 &> /dev/null
	fi

	return $?
}

function do_one {
	for i in $(git log --no-merges --format="%H" $1 | tac); do
		subj=$(git log -1 --format="%s" $i)
		msg=''
		# Let's grab the mainline commit id, this is useful if the version tag
		# doesn't exist in the commit we're looking at but exists upstream.
		orig_cmt=$(git log --no-merges --format="%H" -F --grep "$subj" $STABLE_BASE..origin/master | tail -n1)

		# If the commit doesn't apply for us, skip it
		gittools_check_relevant $orig_cmt
		if [ $? -ne 0 ]; then
			continue
		fi

		gittools_commit_in_tree $orig_cmt
		if [ $? -eq 0 ]; then
		    # Commit is already in the stable branch, skip
			continue
		fi

		rep=''
		do_cp=0
		git show --format=oneline --no-patch --no-decorate $orig_cmt
		while [ "$rep" != "y" ]; do
			echo "Do you want to steal this commit ? (y/n/?)"
			read rep
			case $rep in
				n|N)
					echo "Skip this commit"
					break
					;;
				y|Y)
					rep=y
					do_cp=1
					break
					;;
				"?")
					git show $orig_cmt
					;;
				*)
					echo "Invalid answer $rep"
					git show --format=oneline --no-patch --no-decorate $orig_cmt
					;;
			esac
		done
		if [ $do_cp -ne 1 ]; then
			continue
		fi
		pick_one $i
		if [ $? -gt 0 ] ; then
			if [ $(git status -uno --porcelain | wc -l) -eq 0 ]; then
				git reset --hard
				continue
			fi
			echo "Cherry pick failed. Fix, commit (or reset) and exit."
#			stable deps $i 20
			/bin/bash
			continue
		fi

		# If we didn't find the commit upstream then this must be a custom commit
		# in the given tree - make sure the user checks this commit.
		if [ "$orig_cmt" = "" ] ; then
			msg="Custom"
			orig_cmt=$(git rev-parse HEAD)
			echo "Custom commit, please double-check!"
			/bin/bash
		fi
		gittools_make_pretty $orig_cmt $msg
	done
}

RANGE=''
if [ $# -gt 1 ]; then
        echo "Usage: stable show-missing [<commit range>]"
        exit 1
elif [  $# -eq 1 ]; then
	RANGE=$1
else
	RANGE="$(gittools_match_curstable)..origin/master"
fi

do_one $RANGE

